!
!  bidir_node_test.f90
!  This file is part of FIAT.
!
!  Copyright 2016 Christopher MacMackin <cmacmackin@gmail.com>
!  
!  This program is free software; you can redistribute it and/or modify
!  it under the terms of the GNU Lesser General Public License as
!  published by the Free Software Foundation; either version 3 of the 
!  License, or (at your option) any later version.
!  
!  This program is distributed in the hope that it will be useful,
!  but WITHOUT ANY WARRANTY; without even the implied warranty of
!  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!  GNU Lesser General Public License for more details.
!  
!  You should have received a copy of the GNU Lesser General Public
!  License along with this program; if not, write to the Free Software
!  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
!  MA 02110-1301, USA.
!  

module bidir_node_test_mod
  use bidir_node_mod
  use pfunit_mod
  implicit none

@TestCase
  type, extends(testcase) :: test_bidir_node
    type(bidir_node), pointer :: node1, node2, node3
  contains
    procedure :: setup
    procedure :: teardown
  end type test_bidir_node

contains

  subroutine setup(this)
    class(test_bidir_node), intent(inout) :: this
    allocate(this%node1)
    allocate(this%node2)
    allocate(this%node3)
  end subroutine setup
  
  subroutine teardown(this)
    class(test_bidir_node), intent(inout) :: this
    if (associated(this%node1)) deallocate(this%node1)
    if (associated(this%node2)) deallocate(this%node2)
    if (associated(this%node3)) deallocate(this%node3)
  end subroutine teardown

@Test
  subroutine test_has_prev(this)
    class(test_bidir_node), intent(inout) :: this
    @assertFalse(this%node1%has_prev(), message="Node should not indicate it has next before one has been set.")
    call this%node1%set_prev(this%node2)
    @assertTrue(this%node1%has_prev(), message="Node should indicate it has next after one has been set.")
    call this%node1%unset_prev()
    @assertFalse(this%node1%has_prev(), message="Node should not indicate it has next after next has been unset.")
  end subroutine test_has_prev
  
@Test
  subroutine test_get_prev(this)
    class(test_bidir_node), intent(inout) :: this
    type(bidir_node), pointer :: retval
    retval => this%node1%get_prev()
    @assertNotAssociated(retval,message="Node should return null until it is associated with the next node.")
    call this%node1%set_prev(this%node2)
    retval => this%node1%get_prev()
    @assertAssociated(retval, this%node2, message="Node not returning the node which was set to be next.")
  end subroutine test_get_prev
  
@Test
  subroutine test_unset_prev(this)
    class(test_bidir_node), intent(inout) :: this
    call this%node1%set_prev(this%node2)
    call this%node2%set_prev(this%node3)
    call this%node1%unset_prev()
    @assertNotAssociated(this%node1%get_prev(), this%node2, message="The next node has not be unset.")
    @assertAssociated(this%node2, message="The next node was disassociated.")
    @assertAssociated(this%node2%get_prev(), this%node3, message="The next node's next was disassociated.")
    call this%node1%set_prev(this%node2)
    call this%node1%unset_prev(.true.)
    @assertNotAssociated(this%node1%get_prev(), this%node2, message="The next node has not be unset.")
    nullify(this%node2)
    nullify(this%node3)
    @assertNotAssociated(this%node2, message="The next node was not disassociated")
    @assertNotAssociated(this%node3, message="The next node's next was not disassociated.")
  end subroutine test_unset_prev

@Test
  subroutine test_unset_on_assign(this)
    class(test_bidir_node), intent(inout) :: this
    type(bidir_node), pointer :: new_prev
    allocate(new_prev)
    call this%node1%set_prev(this%node2)
    call this%node2%set_prev(this%node3)
    call this%node1%set_prev(new_prev)
    @assertNotAssociated(this%node1%get_prev(), this%node2, message="The next node has not been changed.")
    @assertAssociated(this%node2, message="The next node was disassociated.")
    @assertAssociated(this%node2%get_prev(), this%node3, message="The next node's next was disassociated.")
    call this%node1%set_prev(this%node2)
    call this%node1%set_prev(new_prev,.true.)
    @assertNotAssociated(this%node1%get_prev(), this%node2, message="The next node has not been changed.")
    nullify(this%node2)
    nullify(this%node3)
    @assertNotAssociated(this%node2, message="The next node was not disassociated")
    @assertNotAssociated(this%node3, message="The next node's next was not disassociated.")
    deallocate(new_prev)
  end subroutine test_unset_on_assign
  
end module bidir_node_test_mod
